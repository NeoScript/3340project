.data

#Operations
addImmediate:		.asciiz "addi"
multiply:		.asciiz "mult"
addNormal:		.asciiz "add"

#Operation Types
typeR:		.asciiz "R"
typeI:		.asciiz "I"
typeJ:		.asciiz "J"


#Parrallel Arrays
operations: 	.word addImmediate, addNormal, multiply #we will search this array
operationType: 	.word typeR, typeR, typeR

#Misc
size: 	.word 3
space:	.asciiz " "

.text

.globl processOperation
	
processOperation:
	la $t1, operations # get array address for operationss
	la $t2, operationType # get array address for operation types

	li $t3, 0 # set loop counter
	lw $t4, size


print_loop:
	beq $t3, $t4, print_loop_end # While(Loop Counter != Size) 

	lw $t7, 0($t1) #move current operations[i] to $t7 for processing
	move $a1, $t7  # move current operations[i] into $a1 to send to strEQ
	
	li $v0, 4
	lw $t7, 0($t2) #move current operationType[i] into $t7 for processing
	move $a0, $t7 # print value at the array pointer
	syscall 
	
	addi $sp, $sp, -4
	sw $ra, ($sp) 
	jal StrEq #Compare $a0 with $a1	
	lw $ra, ($sp)
	addi $sp, $sp, 4
	
	
	beq $v0, 1, found #If strcmp returns 1, the instruction is found

	#Adjust counters for loop and index
	addi $t3, $t3, 1 
	addi $t1, $t1, 4 
	addi $t2, $t2, 4 

j print_loop # repeat the loop

found:
	addi $s7, $zero, 1 
	
	#If Match, then send all necessary params to logOperand
	
	
	#bnez $s7, logOperand
	#jal logOperation

print_loop_end:
li $v0, 10
syscall
